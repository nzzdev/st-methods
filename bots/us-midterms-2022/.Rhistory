rename("Sitze" = seatsheld, "Demokratische Mehrheit" = seatprob_Dparty)
house_distr_raw <- read_csv("https://projects.fivethirtyeight.com/2022-general-election-forecast-data/house_seat_distribution_2022.csv")
house_distr <- house_distr_raw %>%
filter(expression == "_deluxe") %>%
mutate(forecastdate = as.Date(forecastdate, format = "%m/%d/%y"),
seatprob_Dparty =seatprob_Dparty*100) %>%
select(seatsheld, seatprob_Dparty) %>%
arrange(seatsheld) %>%
filter(seatsheld > min(which(!is.na(seatprob_Dparty))) &
seatsheld < max(which(!is.na(seatprob_Dparty)))) %>%
filter(seatprob_Dparty >= .1) %>%
mutate("Republikanische Mehrheit" = seatprob_Dparty) %>%
rename("Sitze" = seatsheld, "Demokratische Mehrheit" = seatprob_Dparty)
View(house_distr)
house_distr$`Demokratische Mehrheit`[house_distr$Sitze < 218] <- NA
house_distr$`Republikanische Mehrheit`[house_distr$Sitze >= 218] <- NA
write_clip(house_distr)
house_distr$`Demokratische Mehrheit`[house_distr$Sitze < 218] <- 0
house_distr$`Republikanische Mehrheit`[house_distr$Sitze >= 218] <- 0
write_clip(house_distr)
house_distr$`Demokratische Mehrheit`[house_distr$Sitze <= 218] <- NA
house_distr$`Republikanische Mehrheit`[house_distr$Sitze >= 218] <- NA
house_distr_raw <- read_csv("https://projects.fivethirtyeight.com/2022-general-election-forecast-data/house_seat_distribution_2022.csv")
house_distr <- house_distr_raw %>%
filter(expression == "_deluxe") %>%
mutate(forecastdate = as.Date(forecastdate, format = "%m/%d/%y"),
seatprob_Dparty =seatprob_Dparty*100) %>%
select(seatsheld, seatprob_Dparty) %>%
arrange(seatsheld) %>%
filter(seatsheld > min(which(!is.na(seatprob_Dparty))) &
seatsheld < max(which(!is.na(seatprob_Dparty)))) %>%
filter(seatprob_Dparty >= .1) %>%
mutate("Republikanische Mehrheit" = seatprob_Dparty) %>%
rename("Sitze" = seatsheld, "Demokratische Mehrheit" = seatprob_Dparty)
house_distr$`Demokratische Mehrheit`[house_distr$Sitze <= 218] <- NA
house_distr$`Republikanische Mehrheit`[house_distr$Sitze >= 218] <- NA
write_clip(house_distr)
house_distr_raw <- read_csv("https://projects.fivethirtyeight.com/2022-general-election-forecast-data/house_seat_distribution_2022.csv")
house_distr <- house_distr_raw %>%
filter(expression == "_deluxe") %>%
mutate(forecastdate = as.Date(forecastdate, format = "%m/%d/%y"),
seatprob_Dparty =seatprob_Dparty*100) %>%
select(seatsheld, seatprob_Dparty) %>%
arrange(seatsheld) %>%
filter(seatsheld > min(which(!is.na(seatprob_Dparty))) &
seatsheld < max(which(!is.na(seatprob_Dparty)))) %>%
filter(seatprob_Dparty >= .1) %>%
mutate("Republikanische Mehrheit" = seatprob_Dparty) %>%
rename("Sitze" = seatsheld, "Demokratische Mehrheit" = seatprob_Dparty)
house_distr$`Demokratische Mehrheit`[house_distr$Sitze < 218] <- 0
house_distr$`Republikanische Mehrheit`[house_distr$Sitze > 218] <- 0
write_clip(house_distr)
house_distr <- house_distr_raw %>%
filter(expression == "_deluxe") %>%
mutate(forecastdate = as.Date(forecastdate, format = "%m/%d/%y"),
seatprob_Dparty =seatprob_Dparty*100) %>%
select(seatsheld, seatprob_Dparty) %>%
arrange(seatsheld) %>%
filter(seatsheld > min(which(!is.na(seatprob_Dparty))) &
seatsheld < max(which(!is.na(seatprob_Dparty)))) %>%
filter(seatprob_Dparty >= .1) %>%
mutate("Republikanische Mehrheit" = seatprob_Dparty) %>%
rename("Sitze" = seatsheld, "Demokratische Mehrheit" = seatprob_Dparty)
house_distr$`Demokratische Mehrheit`[house_distr$Sitze < 218] <- 0
house_distr$`Republikanische Mehrheit`[house_distr$Sitze > 218] <- 0
house_distr <- house_distr_raw %>%
filter(expression == "_deluxe") %>%
mutate(forecastdate = as.Date(forecastdate, format = "%m/%d/%y"),
seatprob_Dparty =seatprob_Dparty*100) %>%
select(seatsheld, seatprob_Dparty) %>%
arrange(seatsheld) %>%
filter(seatsheld > min(which(!is.na(seatprob_Dparty))) &
seatsheld < max(which(!is.na(seatprob_Dparty)))) %>%
filter(seatprob_Dparty >= .1) %>%
mutate("Republikanische Mehrheit" = seatprob_Dparty) %>%
rename("Sitze" = seatsheld, "Demokratische Mehrheit" = seatprob_Dparty)
house_distr$`Demokratische Mehrheit`[house_distr$Sitze < 218] <- NA
house_distr$`Republikanische Mehrheit`[house_distr$Sitze > 218] <- NA
write_clip(house_distr)
browseURL("https://q.st.nzz.ch/editor/chart/8ccfedd216858f7d5f257e1a9a7202ed")
library(readr)
Unbenannte_Tabelle_Tabellenblatt3 <- read_csv("Downloads/Unbenannte Tabelle - Tabellenblatt3.csv")
View(Unbenannte_Tabelle_Tabellenblatt3)
Unbenannte_Tabelle_Tabellenblatt3 <- Unbenannte_Tabelle_Tabellenblatt3 %>%
mutate(Zeit = as.Date(Zeit, format ="%m/%d/%Y"))
library(tidyverse)
Unbenannte_Tabelle_Tabellenblatt3 <- Unbenannte_Tabelle_Tabellenblatt3 %>%
mutate(Zeit = as.Date(Zeit, format ="%m/%d/%Y"))
View(Unbenannte_Tabelle_Tabellenblatt3)
write_clip(Unbenannte_Tabelle_Tabellenblatt3)
library(clipr)
write_clip(Unbenannte_Tabelle_Tabellenblatt3)
#prep
rm(list=ls(all=TRUE)) # Alles bisherige im Arbeitssprecher loeschen
options(scipen=999)
library(tidyverse)
library(clipr)
library(jsonlite)
library(tidyjson)
test <- fromJSON("https://api.ap.org/v3/elections/2022-11-08?apikey=RM9PsVHsJzKBniAlAn6movmTgxTFRwdS&format=json&resultstype=t")
View(test)
test <- fromJSON("https://api.ap.org/v3/elections/2022-11-08?apikey=RM9PsVHsJzKBniAlAn6movmTgxTFRwdS&format=json&resultstype=t") %>%
bind_rows()
test2 <- %>%
test2 <- test %>%
bind_rows()
View(test)
test2$races$incumbents
View(test2)
test3 <- test2$races$reportingUnits
View(test3)
test3 <- test2$races$reportingUnits %>% bind_rows()
View(test3)
test3 <- test2$races$reportingUnits$candidates
test3 <- test2$races$reportingUnits %>% bind_rows()
test3$candidates
cands <- test3$candidates %>% bind_rows()
View(cands)
table(cands$party)
table(cands$party) %>% t()
table(cands$party) %>% t() %>% as_tibble()
cands2 <- table(cands$party) %>% t() %>% as_tibble()
cands2 <- table(cands$party) %>% t()
cands2 <- table(cands$party)
cands2 <- table(cands$party) %>% as.data.frame()
View(cands2)
cands2
View(cands)
View(test3)
test2 <- test %>%
bind_rows()
View(test3)
View(test2)
cands2 <- table(cands$party) %>% as.data.frame()
View(cands2)
View(test2)
test2$races$officeName
test2 <- test %>%
bind_rows() %>%
filter(races$officeName == "U.S. Senate")
test3 <- test2$races$reportingUnits %>% bind_rows() %>% filter()
cands <- test3$candidates %>% bind_rows()
cands2 <- table(cands$party) %>% as.data.frame()
test2 <- test %>%
bind_rows() %>%
filter(races$officeName == "U.S. Senate")
cands <- test3$candidates %>% bind_rows() %>% filter(incumbent == TRUE)
View(cands)
#prep
rm(list=ls(all=TRUE)) # Alles bisherige im Arbeitssprecher loeschen
options(scipen=999)
library(tidyverse)
library(clipr)
library(jsonlite)
library(tidyjson)
library(readr)
hus <- read_csv("Downloads/hus.csv", col_names = FALSE)
View(hus)
hus2 <- hus %>%
mutate(month = str_sub(X1, 1,7))
hus2 <- hus %>%
mutate(month = str_sub(X1, 1,7)) %>%
select(month, X2)
hus2 <- hus %>%
mutate(month = str_sub(X1, 1,7)) %>%
select(month, X2) %>%
group_by(month) %>%
summarise(value = mean(X2))
write_clip(hus2)
#prep
rm(list=ls(all=TRUE)) # Alles bisherige im Arbeitssprecher loeschen
options(scipen=999)
library(tidyverse)
library(clipr)
library(jsonlite)
library(tidyjson)
pnorm(q = IQ_Scores, mean = 100, sd = 15)
pnorm(mean = 100, sd = 15)
IQ_Scores <- c(50:150)
pnorm(q = IQ_Scores, mean = 100, sd = 15)
IQ_Dist <- pnorm(q = IQ_Scores, mean = 100, sd = 15)
IQ <- cbind(IQ_Scores, IQ_Dist)
IQ <- cbind(IQ_Scores, IQ_Dist) %>% as_tibble()
View(IQ)
IQ_Dist <- dnorm(q = IQ_Scores, mean = 100, sd = 15)
IQ <- cbind(IQ_Scores, IQ_Dist) %>% as_tibble()
IQ_Dist <- dnorm(d = IQ_Scores, mean = 100, sd = 15)
IQ_Dist <- dnorm(IQ_Scores, mean = 100, sd = 15)
IQ <- cbind(IQ_Scores, IQ_Dist) %>% as_tibble()
write_clip(IQ)
IQ_Dist <- dnorm(IQ_Scores, mean = 100, sd = 15)*100
IQ <- cbind(IQ_Scores, IQ_Dist) %>% as_tibble()
write_clip(IQ)
IQ_Scores <- c(0:200)
IQ_Dist <- dnorm(IQ_Scores, mean = 100, sd = 15)*100
IQ <- cbind(IQ_Scores, IQ_Dist) %>% as_tibble()
write_clip(IQ)
#prep
rm(list=ls(all=TRUE)) # Alles bisherige im Arbeitssprecher loeschen
options(scipen=999)
library(tidyverse)
library(clipr)
library(jsonlite)
library(tidyjson)
setwd("~/Downloads/us-midterms-2022")
getwd()
# API Access
api <- fromJSON("https://api.ap.org/v3/elections/2022-11-08?apikey=RM9PsVHsJzKBniAlAn6movmTgxTFRwdS&format=json&resultsType=l")
house <- api$races %>%
filter(officeName == "U.S. House" &
raceType %in% c("General", "Open Primary"))
house_tab <- data.frame()
for (i in 1:nrow(house)) {
state <- house$reportingUnits[[i]]$statePostal
cands <- house$reportingUnits[[i]]$candidates %>% bind_rows() %>% as.data.frame()
if("winner" %in% colnames(cands))
{
if("X" %in% cands$winner)
{
winners <- cands %>% filter(winner == "X") %>% select(party) %>% as.vector()
} else
{
winners <- "NA"
}
} else {
winners <- "NA"
}
house_row <- cbind(state, winners) %>% as_tibble()
house_tab <- rbind(house_tab, house_row) %>% as_tibble()
}
row.names(house_tab) <- NULL
house_tab$state <- unlist(house_tab$state)
house_tab$winners <- unlist(house_tab$winners)
house_tab$winners[house_tab$winners == "GOP"] <- "republicans"
house_tab$winners[house_tab$winners == "Dem"] <- "democrats"
house_tab$winners[house_tab$winners != "republicans" &
house_tab$winners != "democrats" &
house_tab$winners != "NA"] <- "others"
table(house_tab$winners)
View(house_tab)
View(house)
View(house[[17]][[1]])
View(house[[17]][[22]])
View((house[[17]][[22]])[[13]][[1]])
View(house[[17]][[29]])
state_id <- paste0(house$reportingUnits[[i]],"-", house$seatNum[1]
if("winner" %in% colnames(cands))
house$seatNum[1]
house <- api$races %>%
filter(officeName == "U.S. House" &
raceType %in% c("General", "Open Primary"))
house_tab <- data.frame()
for (i in 1:nrow(house)) {
state <- house$reportingUnits[[i]]$statePostal
cands <- house$reportingUnits[[i]]$candidates %>% bind_rows() %>% as.data.frame()
state_id <- paste0(house$reportingUnits[[i]],"-", house$seatNum[i]
if("winner" %in% colnames(cands))
if("winner" %in% colnames(cands))
{
if("X" %in% cands$winner)
{
winners <- cands %>% filter(winner == "X") %>% select(party) %>% as.vector()
} else
{
winners <- "NA"
}
} else {
winners <- "NA"
}
}
house_row <- cbind(state, state_id, winners) %>% as_tibble()
house <- api$races %>%
filter(officeName == "U.S. House" &
raceType %in% c("General", "Open Primary"))
house_tab <- data.frame()
for (i in 1:nrow(house)) {
state <- house$reportingUnits[[i]]$statePostal
cands <- house$reportingUnits[[i]]$candidates %>% bind_rows() %>% as.data.frame()
state_id <- paste0(house$reportingUnits[[i]],"-", house$seatNum[i]
if("winner" %in% colnames(cands))
for (i in 1:nrow(house)) {
house_tab <- data.frame()
for (i in 1:nrow(house)) {
state <- house$reportingUnits[[i]]$statePostal
cands <- house$reportingUnits[[i]]$candidates %>% bind_rows() %>% as.data.frame()
state_id <- paste0(house$reportingUnits[[i]],"-", house$seatNum[i]
if("winner" %in% colnames(cands))
house_tab <- data.frame()
i <- 10
state <- house$reportingUnits[[i]]$statePostal
cands <- house$reportingUnits[[i]]$candidates %>% bind_rows() %>% as.data.frame()
state_id <- paste0(house$reportingUnits[[i]],"-", house$seatNum[i] %>% a
if("winner" %in% colnames(cands))
state_id <- paste0(house$reportingUnits[[i]],"-", house$seatNum[i]
if("winner" %in% colnames(cands))
state_id <- paste0(house$reportingUnits[[i]],"-", house$seatNum[i])
house$seatNum[i]
state_id <- paste0(house$reportingUnits[[i]],"-", house$seatNum[i])
state_id
state_id <- paste0(house$reportingUnits[[i]]$statePostal,"-", house$seatNum[i])
state_id
#prep
rm(list=ls(all=TRUE)) # Alles bisherige im Arbeitssprecher loeschen
options(scipen=999)
library(tidyverse)
library(clipr)
library(jsonlite)
library(tidyjson)
setwd("~/Downloads/us-midterms-2022")
getwd()
# API Access
api <- fromJSON("https://api.ap.org/v3/elections/2022-11-08?apikey=RM9PsVHsJzKBniAlAn6movmTgxTFRwdS&format=json&resultsType=l")
house <- api$races %>%
filter(officeName == "U.S. House" &
raceType %in% c("General", "Open Primary"))
house_tab <- data.frame()
for (i in 1:nrow(house)) {
state <- house$reportingUnits[[i]]$statePostal
cands <- house$reportingUnits[[i]]$candidates %>% bind_rows() %>% as.data.frame()
state_id <- paste0(house$reportingUnits[[i]]$statePostal,"-", house$seatNum[i])
if("winner" %in% colnames(cands))
{
if("X" %in% cands$winner)
{
winners <- cands %>% filter(winner == "X") %>% select(party) %>% as.vector()
} else
{
winners <- "NA"
}
} else {
winners <- "NA"
}
house_row <- cbind(state, state_id, winners) %>% as_tibble()
house_tab <- rbind(house_tab, house_row) %>% as_tibble()
}
row.names(house_tab) <- NULL
house_tab$state <- unlist(house_tab$state)
house_tab$winners <- unlist(house_tab$winners)
house_tab$winners[house_tab$winners == "GOP"] <- "republicans"
house_tab$winners[house_tab$winners == "Dem"] <- "democrats"
house_tab$winners[house_tab$winners != "republicans" &
house_tab$winners != "democrats" &
house_tab$winners != "NA"] <- "others"
table(house_tab$winners)
house_tab$state_id <- unlist(house_tab$state_id)
View(house_tab)
house_tab$winners[house_tab$state_id == "CA-15"] <- "democrats"
house_tab$winners[house_tab$state_id == "CA-34"] <- "democrats"
house_tab <- house_tab %>% select(-state_id)
table(house_tab$winners)
#prep
rm(list=ls(all=TRUE)) # Alles bisherige im Arbeitssprecher loeschen
options(scipen=999)
library(tidyverse)
library(jsonlite)
setwd("~/Downloads/us-midterms-2022")
getwd()
# API Access
api <- fromJSON("https://api.ap.org/v3/elections/2022-11-08?apikey=RM9PsVHsJzKBniAlAn6movmTgxTFRwdS&format=json&resultsType=l")
house <- api$races %>%
filter(officeName == "U.S. House" &
raceType %in% c("General", "Open Primary"))
house_tab <- data.frame()
for (i in 1:nrow(house)) {
state <- house$reportingUnits[[i]]$statePostal
cands <- house$reportingUnits[[i]]$candidates %>% bind_rows() %>% as.data.frame()
state_id <- paste0(house$reportingUnits[[i]]$statePostal,"-", house$seatNum[i])
if("winner" %in% colnames(cands))
{
if("X" %in% cands$winner)
{
winners <- cands %>% filter(winner == "X") %>% select(party) %>% as.vector()
} else
{
winners <- "NA"
}
} else {
winners <- "NA"
}
house_row <- cbind(state, state_id, winners) %>% as_tibble()
house_tab <- rbind(house_tab, house_row) %>% as_tibble()
}
row.names(house_tab) <- NULL
house_tab$state <- unlist(house_tab$state)
house_tab$winners <- unlist(house_tab$winners)
house_tab$state_id <- unlist(house_tab$state_id)
house_tab$winners[house_tab$winners == "GOP"] <- "republicans"
house_tab$winners[house_tab$winners == "Dem"] <- "democrats"
house_tab$winners[house_tab$winners != "republicans" &
house_tab$winners != "democrats" &
house_tab$winners != "NA"] <- "others"
house_tab$winners[house_tab$state_id == "CA-15"] <- "democrats"
house_tab$winners[house_tab$state_id == "CA-34"] <- "democrats"
house_tab <- house_tab %>% select(-state_id)
table(house_tab$winners)
senate <- api$races %>%
filter(officeName == "U.S. Senate" & raceID != 8964 & raceID != 3153)
senate_tab <- data.frame()
for (j in 1:nrow(senate)) {
state <- senate$reportingUnits[[j]]$statePostal
incumbent_name <- paste0(senate$incumbents[[j]]$first, " ",senate$incumbents[[j]]$last)
incumbent_party <- senate$incumbents[[j]]$party
cands <- senate$reportingUnits[[j]]$candidates %>% bind_rows() %>% as.data.frame()
cands$fullname <- paste0(cands$first, " ", cands$last)
if("winner" %in% colnames(cands))
{
if("X" %in% cands$winner)
{
winners_party <- cands %>% filter(winner == "X") %>% select(party) %>% as.vector()
winners_name <- cands %>% filter(winner == "X") %>% select(fullname) %>% as.vector()
} else
{
winners_party <- "NA"
winners_name <- "NA"
}
} else {
winners_party <- "NA"
winners_name <- "NA"}
senate_row <- cbind(state, incumbent_party, incumbent_name, winners_party, winners_name) %>% as_tibble()
senate_tab <- rbind(senate_tab, senate_row) %>% as_tibble()
}
row.names(senate_tab) <- NULL
senate_tab$state <- unlist(senate_tab$state)
senate_tab$incumbent_party <- unlist(senate_tab$incumbent_party)
senate_tab$incumbent_name <- unlist(senate_tab$incumbent_name)
senate_tab$winners_party <- unlist(senate_tab$winners_party)
senate_tab$winners_name <- unlist(senate_tab$winners_name)
senate_tab$winners_party[senate_tab$winners_party == "GOP"] <- "republicans"
senate_tab$winners_party[senate_tab$winners_party == "Dem"] <- "democrats"
senate_tab$winners_party[senate_tab$winners_party != "republicans" &
senate_tab$winners_party != "democrats" &
senate_tab$winners_party != "NA"] <- "others"
senate_tab$incumbent_party[senate_tab$incumbent_party == "GOP"] <- "republicans"
senate_tab$incumbent_party[senate_tab$incumbent_party == "Dem"] <- "democrats"
senate_tab$incumbent_party[senate_tab$incumbent_party != "republicans" &
senate_tab$incumbent_party != "democrats" &
senate_tab$incumbent_party != "NA"] <- "others"
senate_tab$winners_party[senate_tab$state == "AK"] <- "republicans"
senate_tab$winners_name[senate_tab$state == "AK"]  <- "Lisa Murkowski oder Kelly Tshibaka*"
table(senate_tab$winners_party)
bars_tab <- data.frame(matrix(ncol = 9, nrow = 2))
colnames(bars_tab) <- c("","democratsNoElection",	"democratsWinners",	"others",	"contested",	"open",
"republicansWinners",	"republicansNoElection",	"total")
bars_tab[,1] <- c("house", "senate")
bars_tab$democratsNoElection <- c(0, 36)
bars_tab$republicansNoElection <- c(0, 29)
bars_tab$total <- c(435, 100)
win_sen <- table(senate_tab$winners_party) %>% as.data.frame()
bars_tab$open[2] <- win_sen %>% filter(Var1 == "NA") %>% select(Freq)
bars_tab$contested[2] <- 0
if("democrats" %in% win_sen$Var1)
{
bars_tab$democratsWinners[2] <- win_sen %>% filter(Var1 == "democrats") %>% select(Freq)
} else {
bars_tab$democratsWinners[2] <- 0
}
if("republicans" %in% win_sen$Var1)
{
bars_tab$republicansWinners[2] <- win_sen %>% filter(Var1 == "republicans") %>% select(Freq)
} else {
bars_tab$republicansWinners[2] <- 0
}
if("others" %in% win_sen$Var1)
{
bars_tab$others[2] <- win_sen %>% filter(Var1 == "others") %>% select(Freq)
} else {
bars_tab$others[2] <- 0
}
win_hou <- table(house_tab$winners) %>% as.data.frame()
bars_tab$open[1] <- win_hou %>% filter(Var1 == "NA") %>% select(Freq)
bars_tab$contested[1] <- 0
if("democrats" %in% win_hou$Var1)
{
bars_tab$democratsWinners[1] <- win_hou %>% filter(Var1 == "democrats") %>% select(Freq)
} else {
bars_tab$democratsWinners[1] <- 0
}
if("republicans" %in% win_hou$Var1)
{
bars_tab$republicansWinners[1] <- win_hou %>% filter(Var1 == "republicans") %>% select(Freq)
} else {
bars_tab$republicansWinners[1] <- 0
}
if("others" %in% win_hou$Var1)
{
bars_tab$others[1] <- win_hou %>% filter(Var1 == "others") %>% select(Freq)
} else {
bars_tab$others[1] <- 0
}
bars_tab
source("./helpers.R")
time <- paste0(str_sub(Sys.time(), 12, 16), " Uhr")
#### API AP US Elections 2022 ####
install.packages("renv")
library(renv)
renv::init()
options(scipen=999)
library(tidyverse)
library(jsonlite)
setwd("~/Downloads/us-midterms-2022")
getwd()
# setwd for fixes
setwd("~/Documents/GitHub/st-methods/bots/us-midterms-2022")
#renv
library(renv)
renv::init()
renv::snapshot()
# #renv
# library(renv)
# renv::init()
# renv::snapshot()
renv::restore()
