library(readxl)
library(httr)
library(rvest)
library(RCurl)
library(zoo)
library(curl)
library(countrycode)
library(car)
oxford <- read_csv('https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/data/OxCGRT_latest.csv') %>%
mutate(Date = as.Date(as.character(Date), format="%Y%m%d"))
oxford$Land <- countrycode(oxford$`CountryName`, 'country.name', 'cldr.short.de_ch')
oxford$Land <- car::recode(oxford$Land, '"Vereinigte Arabische Emirate"="VAE"')
oxford$Land <- car::recode(oxford$Land, '"Saudi-Arabien"="Saudiarabien"')
oxford$Land <- car::recode(oxford$Land, '"Bosnien und Herzegowina" = "Bosnien-Herz."')
oxford$Land <- car::recode(oxford$Land, '"Nordmazedonien" = "Nordmazed."')
oxford$Land <- car::recode(oxford$Land, '"Republik Moldau" = "Moldau"')
oxford$Land <- car::recode(oxford$Land, '"Trinidad und Tobago" = "Trinidad u. T."')
oxford$Land <- car::recode(oxford$Land, '"Dominikanische Republik" = "Dominikan. Rep."')
oxford$Land <- car::recode(oxford$Land, '"Bangladesch" = "Bangladesh"')
oxford$Land <- car::recode(oxford$Land, '"Zimbabwe" = "Simbabwe"')
oxford$Land <- car::recode(oxford$Land, '"Kirgisistan" = "Kirgistan"')
# OECD countries + BRICS
oecd_brics <- c('Belgien',
'Dänemark',
'Deutschland',
'Frankreich',
'Griechenland',
'Irland',
'Island',
'Italien',
'Kanada',
'Luxemburg',
'Niederlande',
'Norwegen',
'Österreich',
'Portugal',
'Schweden',
'Schweiz',
'Spanien',
'Türkei',
'USA',
'GB',
'Japan',
'Finnland',
'Australien',
'Neuseeland',
'Mexiko',
'Tschechien',
'Südkorea',
'Ungarn',
'Polen',
'Slowakei',
'Chile',
'Slowenien',
'Israel',
'Estland',
'Lettland',
'Litauen',
'Kolumbien',
'Costa Rica',
'China',
'Russland',
'Brasilien',
'Indien',
'Südafrika')
oxford_countries <- oxford  %>%
filter(Land %in% oecd_brics) %>%
drop_na(StringencyIndexForDisplay) %>%
arrange(Land, Date) %>%
mutate(pct_of_max = (StringencyIndexForDisplay*100) / max(StringencyIndexForDisplay, na.rm = T)) %>%
mutate(diff_pct_max = pct_of_max - lag(pct_of_max, 14, default = 0)) %>%
mutate(Tendenz = case_when
(diff_pct_max > 5 ~ '\U2191',
diff_pct_max < -5 ~ '\U2193',
TRUE ~ '\U2192',)) %>%
mutate(StringencyIndexForDisplay = round(StringencyIndexForDisplay, 1)) %>%
filter(Date == last(Date)) %>%
select(Land, StringencyIndexForDisplay, Tendenz) %>%
arrange(desc(StringencyIndexForDisplay)) %>%
dplyr::rename(`Stringency Index` = StringencyIndexForDisplay)
notes <- paste0("Lesebeispiel: In ", first(oxford_countries$Land), " betragen die Einschränkungen des öffentlichen Lebens ",  first(round(oxford_countries$`Stringency Index`)), "% des maximalen Niveaus von 100%. <br>Berücksichtigt werden alle OECD- und BRICS-Länder. Als sinkend bzw. steigend gilt eine Entwicklung, wenn der aktuelle Wert im Vergleich zum Maximalwert des Landes in den letzten 14 Tagen um 5 Prozentpunkte ab- bzw. zugenommen hat. GB = Grossbritannien, VAE = Vereinigte Arabische Emirate. <br>Stand: ", format(last(oxford$Date), format = "%d. %m. %Y"))
View(oxford_countries)
install.packages("XLConnect")
rm(list = ls())
#library(kofdata)
library(clipr)
library(tidyverse)
library(readxl)
library(httr)
library(rvest)
library(RCurl)
library(zoo)
library(curl)
library(XLConnect)
library(lubridate)
library(countrycode)
options(scipen=999)
setwd("~/NZZ-Mediengruppe/NZZ Visuals - Dokumente/Projekte/_2020/2009 Wirtschaftsindikatoren")
pg <- read_html("https://www.seco.admin.ch/seco/de/home/wirtschaftslage---wirtschaftspolitik/Wirtschaftslage/indikatoren/wwa.html")
# get all the Excel (xls) links on that page:
html_nodes(pg, xpath=".//a[contains(@href, '.xls')]") %>%
html_attr("href") %>%
sprintf("https://www.seco.admin.ch%s", .) -> excel_links
excel_links[1]
url <- excel_links[1]
GET(url, write_disk(tf <- tempfile(fileext = ".xls")))
url <- excel_links[1]
GET(url, write_disk(tf <- tempfile(fileext = ".xls")))
pg <- read_html("https://www.seco.admin.ch/seco/de/home/wirtschaftslage---wirtschaftspolitik/Wirtschaftslage/indikatoren/wwa.html")
html_nodes(pg, xpath=".//a[contains(@href, '.xls')]") %>%
html_attr("href") %>%
sprintf("https://www.seco.admin.ch%s", .) -> excel_links
excel_links[1]
url <- excel_links[1]
GET(url, write_disk(tf <- tempfile(fileext = ".xls")))
url = replace(url, 'https', 'http')
url = gsub("https", "http", url)
seco <- read.xls(url, sheet = 3)
library(gdata)
install.packages(gdata)
install.packages('gdata')
library(gdata)
seco <- read.xls(url, sheet = 3)
url
url <- excel_links[1]
GET(url, write_disk(tf <- tempfile(fileext = ".xls")))
tf
seco <- read_excel(tf, sheet = 3)
seco <- read.xls(tf, sheet = 3)
View(seco)
seco <- read.xls(tf, sheet = 3, skip = 2)
View(seco)
seco <- read.xls(tf, sheet = 3, skip = 2, header = T)
View(seco)
seco$Col3 <- ifelse(seco$Col2 < 10, paste0('0', as.character(seco$Col2)), as.character(seco$Col2))
View(seco)
seco$X.1 <- ifelse(seco$X.1 < 10, paste0('0', as.character(seco$X.1)), as.character(seco$X.1))
seco$KW <- paste0(as.character(seco$Col1), '-W', seco$Col3)
seco$KW <- paste0(as.character(seco$X.1), '-W', seco$Col3)
q <- seco %>% dplyr::select(KW, WEA) %>% drop_na()
View(q)
seco$KW <- paste0(as.character(seco$X), '-W', seco$X.1)
q <- seco %>% dplyr::select(KW, WEA) %>% drop_na()
View(q)
View(q)
schweiz <- seco %>% dplyr::select(KW, WEA) %>% drop_na()
pg <- read_html("https://www.oenb.at/Publikationen/corona/bip-indikator-der-oenb.html")
# get all the Excel (xlsx) links on that page:
html_nodes(pg, xpath=".//a[contains(@href, '.xlsx')]") %>%
html_attr("href") %>%
sprintf("https://www.oenb.at%s", .) -> excel_links
excel_links[1]
url <- excel_links[1]
GET(url, write_disk(tf <- tempfile(fileext = ".xlsx")))
oenb <- read_excel(tf, sheet="Wochen-BIP-Indikator", skip = 13)
oenb <- oenb[ -c(1,2) ]
oenb <- oenb %>% drop_na(Tourismusexporte)
names(oenb)[1] <- "Datum"
oenb$Datum <- gsub(' K', '-', oenb$Datum)
View(oenb)
q <- oenb[,c(1:7)]
View(oenb)
oenb <- oenb[,c(1:7)]
pg <- read_html("https://www.oenb.at/Publikationen/corona/bip-indikator-der-oenb.html")
# get all the Excel (xlsx) links on that page:
html_nodes(pg, xpath=".//a[contains(@href, '.xlsx')]") %>%
html_attr("href") %>%
sprintf("https://www.oenb.at%s", .) -> excel_links
excel_links[1]
url <- excel_links[1]
GET(url, write_disk(tf <- tempfile(fileext = ".xlsx")))
oenb <- read_excel(tf, sheet="Wochen-BIP-Indikator", skip = 13)
oenb <- oenb[ -c(1,2) ]
oenb <- oenb %>% drop_na(Tourismusexporte)
names(oenb)[1] <- "Datum"
oenb$Datum <- gsub(' K', '-', oenb$Datum)
write_clip(oenb)
View(oenb)
oenb_bip <- subset(select = c('Datum', 'Reales BIP im Vorjahresvergleich'))
oenb_bip <- subset(oenb_bip, select = c('Datum', 'Reales BIP im Vorjahresvergleich'))
oenb_bip <- subset(oenb, select = c('Datum', 'Reales BIP im Vorjahresvergleich'))
schweiz_oenb <- merge(schweiz, oenb_bip, by = 'KW', all = TRUE)
seco$Datum <- paste0(as.character(seco$X), '-W', seco$X.1)
schweiz <- seco %>% dplyr::select(Datum, WEA) %>% drop_na()
schweiz_oenb <- merge(schweiz, oenb_bip, by = 'Datum', all = TRUE)
View(schweiz)
View(schweiz_oenb)
oenb_bip <- subset(oenb, select = c('Datum', 'Reales BIP im Vorkrisenvergleich'))
schweiz_oenb <- merge(schweiz, oenb_bip, by = 'Datum', all = TRUE)
View(schweiz_oenb)
View(q)
View(oenb)
View(schweiz)
oenb_bip <- subset(oenb, select = c('Datum', 'Reales BIP im Vorkrisenvergleich'))
View(oenb_bip)
schweiz_oenb <- merge(schweiz, oenb_bip, by = 'Datum', all = TRUE)
View(schweiz_oenb)
View(oenb_bip)
pg <- read_html("https://www.oenb.at/Publikationen/corona/bip-indikator-der-oenb.html")
# get all the Excel (xlsx) links on that page:
html_nodes(pg, xpath=".//a[contains(@href, '.xlsx')]") %>%
html_attr("href") %>%
sprintf("https://www.oenb.at%s", .) -> excel_links
excel_links[1]
url <- excel_links[1]
GET(url, write_disk(tf <- tempfile(fileext = ".xlsx")))
oenb <- read_excel(tf, sheet="Wochen-BIP-Indikator", skip = 13)
oenb <- oenb[ -c(1,2) ]
oenb <- oenb %>% drop_na(Tourismusexporte)
names(oenb)[1] <- "Datum"
oenb$Datum <- gsub(' K', '-', oenb$Datum)
View(oenb)
View(oenb)
pg <- read_html("https://www.oenb.at/Publikationen/corona/bip-indikator-der-oenb.html")
# get all the Excel (xlsx) links on that page:
html_nodes(pg, xpath=".//a[contains(@href, '.xlsx')]") %>%
html_attr("href") %>%
sprintf("https://www.oenb.at%s", .) -> excel_links
excel_links[1]
url <- excel_links[1]
GET(url, write_disk(tf <- tempfile(fileext = ".xlsx")))
oenb <- read_excel(tf, sheet="Wochen-BIP-Indikator", skip = 13)
oenb <- oenb[ -c(1,2) ]
oenb <- oenb %>% drop_na(Tourismusexporte)
names(oenb)[1] <- "Datum"
View(oenb)
pg <- read_html("https://www.oenb.at/Publikationen/corona/bip-indikator-der-oenb.html")
# get all the Excel (xlsx) links on that page:
html_nodes(pg, xpath=".//a[contains(@href, '.xlsx')]") %>%
html_attr("href") %>%
sprintf("https://www.oenb.at%s", .) -> excel_links
excel_links[1]
url <- excel_links[1]
GET(url, write_disk(tf <- tempfile(fileext = ".xlsx")))
oenb <- read_excel(tf, sheet="Wochen-BIP-Indikator", skip = 13)
oenb <- oenb[ -c(1,2) ]
oenb <- oenb %>% drop_na(Tourismusexporte)
oenb <- oenb[ -c(1,2) ]
sub("^(\\d+) to \\d+"$, "\\1", oenb$Jahr)
sub("^(\\d+) to \\d+", "\\1", oenb$Jahr)
sub("^(\\d+) to \\d+", "\\1", oenb$Datum)
substr(oenb$Datum, start = 1 , stop = 2 )
oenb <- read_excel(tf, sheet="Wochen-BIP-Indikator", skip = 13)
oenb <- oenb[ -c(1,2) ]
oenb <- oenb %>% drop_na(Tourismusexporte)
names(oenb)[1] <- "Datum"
oenb$Jahr <-
substr(oenb$Datum, start = 1 , stop = 2 )
oenb$Jahr <-
substr(oenb$Datum, start = 1 , stop = 4 )
as.int(substr(oenb$Datum, start = 1 , stop = 4 ))
as.integer(substr(oenb$Datum, start = 1 , stop = 4 ))
oenb$Jahr <- as.integer(substr(oenb$Datum, start = 1 , stop = 4 ))
sub(".*\\D(\\d+).*", "\\1", oenb$Datum)
oenb$Woche <- as.integer(sub(".*\\D(\\d+).*", "\\1", oenb$Datum))
seco$Woche <- ifelse(seco$Woche < 10, paste0('0', as.character(seco$Woche)), as.character(seco$Woche))
oenb$Woche <- ifelse(oenb$Woche < 10, paste0('0', as.character(oenb$Woche)), as.character(oenb$Woche))
oenb$Datum <- paste0(as.character(oenb$Jahr), '-W', oenb$Woche)
q <- oenb[,c(1:7)]
write_clip(q)
browseURL("https://q.st.nzz.ch/editor/chart/84daeadb234674f39b55f90454fca893")
oenb_bip <- subset(oenb, select = c('Datum', 'Reales BIP im Vorkrisenvergleich'))
schweiz_oenb <- merge(schweiz, oenb_bip, by = 'Datum', all = TRUE)
write_clip(schweiz_oenb)
schweiz_oenb <- merge(schweiz, oenb_bip, by = 'Datum', all = TRUE) %>%
dplyr::rename('Schweiz' = 1, 'Österreich' = 2)
write_clip(schweiz_oenb)
schweiz_oenb <- merge(schweiz, oenb_bip, by = 'Datum', all = TRUE) %>%
dplyr::rename('Schweiz' = 2, 'Österreich' = 2)
write_clip(schweiz_oenb)
schweiz_oenb <- merge(schweiz, oenb_bip, by = 'Datum', all = TRUE) %>%
dplyr::rename('Schweiz' = 2, 'Österreich' = 3)
write_clip(schweiz_oenb)
pg <- read_html("https://www.seco.admin.ch/seco/de/home/wirtschaftslage---wirtschaftspolitik/Wirtschaftslage/indikatoren/wwa.html")
# get all the Excel (xls) links on that page:
html_nodes(pg, xpath=".//a[contains(@href, '.xls')]") %>%
html_attr("href") %>%
sprintf("https://www.seco.admin.ch%s", .) -> excel_links
excel_links[1]
url <- excel_links[1]
GET(url, write_disk(tf <- tempfile(fileext = ".xls")))
seco <- readWorksheetFromFile (tf, 3, startRow = 4, header = T)
seco$Col3 <- ifelse(seco$Col2 < 10, paste0('0', as.character(seco$Col2)), as.character(seco$Col2))
seco$KW <- paste0(as.character(seco$Col1), '-W', seco$Col3)
notes <- paste0("Lesebeispiel: In ", first(oxford_countries$Land), " betragen die Einschränkungen des öffentlichen Lebens ",  first(round(oxford_countries$`Stringency Index`)), "% des maximalen Niveaus von 100%. <br>Berücksichtigt werden alle OECD- und BRICS-Länder. Als sinkend bzw. steigend gilt eine Entwicklung, wenn der aktuelle Wert im Vergleich zum Maximalwert des Landes in den letzten 14 Tagen um 5 Prozentpunkte ab- bzw. zugenommen hat. GB = Grossbritannien, VAE = Vereinigte Arabische Emirate. <br>Stand: ", format(last(oxford$Date), format = "%d. %m. %Y"))
oxford <- read_csv('https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/data/OxCGRT_latest.csv') %>%
mutate(Date = as.Date(as.character(Date), format="%Y%m%d"))
oxford$Land <- countrycode(oxford$`CountryName`, 'country.name', 'cldr.short.de_ch')
oxford$Land <- car::recode(oxford$Land, '"Vereinigte Arabische Emirate"="VAE"')
oxford$Land <- car::recode(oxford$Land, '"Saudi-Arabien"="Saudiarabien"')
oxford$Land <- car::recode(oxford$Land, '"Bosnien und Herzegowina" = "Bosnien-Herz."')
oxford$Land <- car::recode(oxford$Land, '"Nordmazedonien" = "Nordmazed."')
oxford$Land <- car::recode(oxford$Land, '"Republik Moldau" = "Moldau"')
oxford$Land <- car::recode(oxford$Land, '"Trinidad und Tobago" = "Trinidad u. T."')
oxford$Land <- car::recode(oxford$Land, '"Dominikanische Republik" = "Dominikan. Rep."')
oxford$Land <- car::recode(oxford$Land, '"Bangladesch" = "Bangladesh"')
oxford$Land <- car::recode(oxford$Land, '"Zimbabwe" = "Simbabwe"')
oxford$Land <- car::recode(oxford$Land, '"Kirgisistan" = "Kirgistan"')
# OECD countries + BRICS
oecd_brics <- c('Belgien',
'Dänemark',
'Deutschland',
'Frankreich',
'Griechenland',
'Irland',
'Island',
'Italien',
'Kanada',
'Luxemburg',
'Niederlande',
'Norwegen',
'Österreich',
'Portugal',
'Schweden',
'Schweiz',
'Spanien',
'Türkei',
'USA',
'GB',
'Japan',
'Finnland',
'Australien',
'Neuseeland',
'Mexiko',
'Tschechien',
'Südkorea',
'Ungarn',
'Polen',
'Slowakei',
'Chile',
'Slowenien',
'Israel',
'Estland',
'Lettland',
'Litauen',
'Kolumbien',
'Costa Rica',
'China',
'Russland',
'Brasilien',
'Indien',
'Südafrika')
oxford_countries <- oxford  %>%
filter(Land %in% oecd_brics) %>%
drop_na(StringencyIndexForDisplay) %>%
arrange(Land, Date) %>%
mutate(pct_of_max = (StringencyIndexForDisplay*100) / max(StringencyIndexForDisplay, na.rm = T)) %>%
mutate(diff_pct_max = pct_of_max - lag(pct_of_max, 14, default = 0)) %>%
mutate(Tendenz = case_when
(diff_pct_max > 5 ~ '\U2191',
diff_pct_max < -5 ~ '\U2193',
TRUE ~ '\U2192',)) %>%
mutate(StringencyIndexForDisplay = round(StringencyIndexForDisplay, 1)) %>%
filter(Date == last(Date)) %>%
select(Land, StringencyIndexForDisplay, Tendenz) %>%
arrange(desc(StringencyIndexForDisplay)) %>%
dplyr::rename(`Stringency Index` = StringencyIndexForDisplay)
notes <- paste0("Lesebeispiel: In ", first(oxford_countries$Land), " betragen die Einschränkungen des öffentlichen Lebens ",  first(round(oxford_countries$`Stringency Index`)), "% des maximalen Niveaus von 100%. <br>Berücksichtigt werden alle OECD- und BRICS-Länder. Als sinkend bzw. steigend gilt eine Entwicklung, wenn der aktuelle Wert im Vergleich zum Maximalwert des Landes in den letzten 14 Tagen um 5 Prozentpunkte ab- bzw. zugenommen hat. GB = Grossbritannien, VAE = Vereinigte Arabische Emirate. <br>Stand: ", format(last(oxford$Date), format = "%d. %m. %Y"))
gsub("\\b0(\\d)\\b", "\\1", format(max(oxford$Date), format = "%d. %m. %Y"))
notes <- paste0("Lesebeispiel: In ", first(oxford_countries$Land), " betragen die Einschränkungen des öffentlichen Lebens ",  first(round(oxford_countries$`Stringency Index`)), "% des maximalen Niveaus von 100%. <br>Berücksichtigt werden alle OECD- und BRICS-Länder. Als sinkend bzw. steigend gilt eine Entwicklung, wenn der aktuelle Wert im Vergleich zum Maximalwert des Landes in den letzten 14 Tagen um 5 Prozentpunkte ab- bzw. zugenommen hat. GB = Grossbritannien, VAE = Vereinigte Arabische Emirate. <br>Stand: ", gsub("\\b0(\\d)\\b", "\\1", format(max(oxford$Date), format = "%d. %m. %Y")))
notes
renv::init()
rm(list = ls(all = TRUE))
options(scipen = 999)
library(coindeskr)
library(lubridate)
library(tidyverse)
library(readr)
library(rvest)
library(stringr)
library(coinmarketcapr)
# import helper functions
source("./helpers.R")
date <- Sys.Date()
teny_back <- ymd(date) - years(10)
oney_back <- ymd(date) - years(1)
if(date != '2022-03-29') {
onem_back <- ymd(date) - months(1)
} else {
onem_back <- '2022-02-28'
}
date <- Sys.Date()
teny_back <- ymd(date) - years(10)
oney_back <- ymd(date) - years(1)
if(date != '2022-03-29' & date != '2022-03-30' & date != '2022-03-31') {
onem_back <- ymd(date) - months(1)
} else {
onem_back <- '2022-02-28'
}
rm(list = ls(all = TRUE))
options(scipen = 999)
library(coindeskr)
library(lubridate)
library(tidyverse)
library(readr)
library(rvest)
library(stringr)
library(coinmarketcapr)
date <- Sys.Date()
teny_back <- ymd(date) - years(10)
oney_back <- ymd(date) - years(1)
if(date != '2022-03-29' & date != '2022-03-30' & date != '2022-03-31') {
onem_back <- ymd(date) - months(1)
} else {
onem_back <- '2022-02-28'
}
current_price <- get_current_price() %>%
select(bpi.USD.rate_float) %>%
mutate(date = date) %>%
dplyr::rename(Price = 1) %>%
select(2, 1)
historic_price_ten <- get_historic_price("USD", teny_back, date - 1) %>%
tibble::rownames_to_column("date") %>%
mutate(date = as.Date(date, "%Y-%m-%d")) %>%
rbind(current_price) %>%
mutate(Price = round(Price, 1))
historic_price_one <- get_historic_price("USD", oney_back, date - 1) %>%
tibble::rownames_to_column("date") %>%
mutate(date = as.Date(date, "%Y-%m-%d")) %>%
rbind(current_price) %>%
mutate(Price = round(Price, 1))
historic_price_onem <- get_historic_price('USD', onem_back, date-1) %>%
tibble::rownames_to_column("date") %>%
mutate(date = as.Date(date, "%Y-%m-%d")) %>%
rbind(current_price) %>%
mutate(Price = round(Price, 1))
coinmarketcapr::setup(Sys.getenv("COINMARKETCAPR_API_KEY"))
market_cap <- get_crypto_listings() %>%
slice(1:10) %>%
select(name, USD_market_cap)
get_crypto_listings()
get_crypto_listings(currency = "USD", latest = TRUE)
coinmarketcapr::setup(Sys.getenv("COINMARKETCAPR_API_KEY"))
key = 'd5bcf48c-25ea-423f-a130-1c0e6ce76797'
coinmarketcapr::setup(key)
market_cap <- get_crypto_listings() %>%
slice(1:10) %>%
select(name, USD_market_cap)
market_cap <- as.data.frame(read_html('https://coinmarketcap.com/')  %>%
html_table(fill = TRUE)) %>%
separate(col = "Name" , into = c("Name", NA), sep = "(?<=[a-zA-Z])\\s*(?=[0-9])")  %>%
separate(col = "Market.Cap" , into = c('x', "Market.Cap"), sep = "(?<=[a-zA-Z])") %>%
select(Name, Market.Cap) %>%
drop_na() %>%
mutate(Market.Cap = str_replace_all(Market.Cap, "[^[:alnum:]]", ""))
View(market_cap)
write_clip(market_cap)
browseURL('https://q.st.nzz.ch/editor/chart/9640becc888e8a5d878819445105edce')
library(coindeskr)
library(lubridate)
library(tidyverse)
library(clipr)
library(readr)
library(rvest)
library(stringr)
library(coinmarketcapr)
write_clip(market_cap)
rm(list = ls(all = TRUE))
options(scipen = 999)
library(coindeskr)
library(lubridate)
library(tidyverse)
library(readr)
library(rvest)
library(stringr)
library(coinmarketcapr)
date <- Sys.Date()
teny_back <- ymd(date) - years(10)
oney_back <- ymd(date) - years(1)
if(date != '2022-03-29' & date != '2022-03-30' & date != '2022-03-31') {
onem_back <- ymd(date) - months(1)
} else {
onem_back <- '2022-02-28'
}
current_price <- get_current_price() %>%
select(bpi.USD.rate_float) %>%
mutate(date = date) %>%
dplyr::rename(Price = 1) %>%
select(2, 1)
historic_price_ten <- get_historic_price("USD", teny_back, date - 1) %>%
tibble::rownames_to_column("date") %>%
mutate(date = as.Date(date, "%Y-%m-%d")) %>%
rbind(current_price) %>%
mutate(Price = round(Price, 1))
write_clip(historic_price_ten)
library(clipr)
write_clip(historic_price_ten)
historic_price_one <- get_historic_price("USD", oney_back, date - 1) %>%
tibble::rownames_to_column("date") %>%
mutate(date = as.Date(date, "%Y-%m-%d")) %>%
rbind(current_price) %>%
mutate(Price = round(Price, 1))
write_clip(historic_price_one)
historic_price_onem <- get_historic_price('USD', onem_back, date-1) %>%
tibble::rownames_to_column("date") %>%
mutate(date = as.Date(date, "%Y-%m-%d")) %>%
rbind(current_price) %>%
mutate(Price = round(Price, 1))
write_clip(historic_price_onem)
write_clip(historic_price_onem)
market_cap <- as.data.frame(read_html('https://coinmarketcap.com/')  %>%
html_table(fill = TRUE)) %>%
separate(col = "Name" , into = c("Name", NA), sep = "(?<=[a-zA-Z])\\s*(?=[0-9])")  %>%
separate(col = "Market.Cap" , into = c('x', "Market.Cap"), sep = "(?<=[a-zA-Z])") %>%
select(Name, Market.Cap) %>%
drop_na() %>%
mutate(Market.Cap = str_replace_all(Market.Cap, "[^[:alnum:]]", ""))
write_clip(market_cap)
energy <- read_csv("https://static.dwcdn.net/data/cFnri.csv") %>%
select(1, 2) %>%
mutate(Date = as.Date(Date, format = "%Y/%m/%d"))
write_clip(energy)
