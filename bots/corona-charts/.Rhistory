bag_hosps <- read_csv(bag_data$sources$individual$csv$daily$hosp) %>%
select("geoRegion", "datum", "entries", "sumTotal") %>%
filter(datum != max(datum)) #exclude today
bag_hosp_cap <- read_csv(bag_data$sources$individual$csv$daily$hospCapacity) %>%
select("geoRegion", "date", "ICUPercent_AllPatients", "ICUPercent_NonCovid19Patients",
"ICUPercent_Covid19Patients", "ICUPercent_FreeCapacity",
"TotalPercent_AllPatients", "TotalPercent_NonCovid19Patients",
"TotalPercent_Covid19Patients", "TotalPercent_FreeCapacity") %>%
filter(date != max(date)) #exclude today
bag_tests <- read_csv(bag_data$sources$individual$csv$daily$test) %>%
select("geoRegion", "datum", "entries", "pos_anteil", "sumTotal", "pop")
bag_testPcrAntigen <- read_csv(bag_data$sources$individual$csv$daily$testPcrAntigen) %>%
select("geoRegion", "datum", "entries", "nachweismethode", "pos_anteil")
bag_cert <- read_csv(bag_data$sources$individual$csv$daily$covidCertificates) %>%
filter(type_variant != 'all') %>%
select("geoRegion", "date", "type_variant", "sumTotal")
bag_var <- read.csv(bag_data$sources$individual$csv$daily$virusVariantsWgs)%>%
filter(geoRegion == 'CHFL') %>%
select("variant_type", "date", "prct", "prct_lower_ci", "prct_upper_ci", "prct_mean7d", "entries")
bag_hosps_dash <- read_csv(bag_data$sources$individual$csv$daily$hosp) %>%
select("geoRegion", "datum", "entries", "sumTotal") %>%
filter(datum != max(datum)) #exclude today
roll_ch_bag_death_hosp_dash <- bag_deaths_dash %>%
full_join(bag_hosps_dash, by = c("geoRegion", "datum")) %>%
filter(datum >= "2020-02-28" & datum <=  last(datum)-5, geoRegion == 'CHFL')  %>%
mutate(hosp_roll = rollmean(entries.y,7,fill = 0, align = "right"),
death_roll = rollmean(entries.x,7,fill = 0, align = "right")) %>%
select("datum", "hosp_roll", "death_roll") %>%
rename(Hospitalierungen = hosp_roll, Todesfälle = death_roll)
bag_cases_dash <- read_csv(bag_data$sources$individual$csv$daily$cases)%>%
select("geoRegion", "datum", "entries", "sumTotal", "pop") %>%
filter(datum != max(datum)) #exclude today, because new cases will not be there
bag_deaths_dash <- read_csv(bag_data$sources$individual$csv$daily$death) %>%
select("geoRegion", "datum", "entries", "sumTotal") %>%
filter(datum != max(datum)) #exclude today
bag_hosps_dash <- read_csv(bag_data$sources$individual$csv$daily$hosp) %>%
select("geoRegion", "datum", "entries", "sumTotal") %>%
filter(datum != max(datum)) #exclude today
bag_cases_ravg <- bag_cases_dash %>%
filter(geoRegion == 'CHFL', datum >= "2020-02-28" & datum <= last(datum)-2) %>%
mutate(value = round(rollmean(entries, 7, fill = 0, align = "right"),0)) %>%
select("datum", "value") %>%
rename(date = datum)
roll_ch_bag_death_hosp_dash <- bag_deaths_dash %>%
full_join(bag_hosps_dash, by = c("geoRegion", "datum")) %>%
filter(datum >= "2020-02-28" & datum <=  last(datum)-5, geoRegion == 'CHFL')  %>%
mutate(hosp_roll = rollmean(entries.y,7,fill = 0, align = "right"),
death_roll = rollmean(entries.x,7,fill = 0, align = "right")) %>%
select("datum", "hosp_roll", "death_roll") %>%
rename(Hospitalierungen = hosp_roll, Todesfälle = death_roll)
roll_ch_bag_hosp <- roll_ch_bag_death_hosp_dash %>%
select(datum, Hospitalierungen) %>%
filter(datum >= '2020-10-01') %>%
rename(date = datum, value = Hospitalierungen)
roll_ch_bag_death <- roll_ch_bag_death_hosp_dash %>%
select(datum, `Todesfälle`) %>%
filter(datum >= '2020-10-01') %>%
rename(date = datum, value = `Todesfälle`)
View(roll_ch_bag_hosp)
View(roll_ch_bag_hosp)
roll_ch_bag_death_hosp <- bag_cases %>%
full_join(bag_deaths, by = c("geoRegion", "datum")) %>%
full_join(bag_hosps, by = c("geoRegion", "datum")) %>%
filter(datum >= "2020-02-28" & datum <=  last(datum)-5, geoRegion == 'CHFL')  %>%
mutate(entries.y = replace_na(entries.y, 0),
hosp_roll = rollmean(entries,7,fill = 0, align = "right"),
death_roll = rollmean(entries.y,7,fill = 0, align = "right")) %>%
select("datum", "hosp_roll", "death_roll") %>%
rename(Hospitalierungen = hosp_roll, Todesfälle = death_roll)
View(roll_ch_bag_hosp)
View(roll_ch_bag_death_hosp)
bag_cases_dash <- read_csv(bag_data$sources$individual$csv$daily$cases)%>%
select("geoRegion", "datum", "entries", "sumTotal", "pop") %>%
filter(datum != max(datum)) #exclude today, because new cases will not be there
bag_deaths_dash <- read_csv(bag_data$sources$individual$csv$daily$death) %>%
select("geoRegion", "datum", "entries", "sumTotal") %>%
filter(datum != max(datum)) #exclude today
bag_hosps_dash <- read_csv(bag_data$sources$individual$csv$daily$hosp) %>%
select("geoRegion", "datum", "entries", "sumTotal") %>%
filter(datum != max(datum)) #exclude today
bag_cases_ravg <- bag_cases_dash %>%
filter(geoRegion == 'CHFL', datum >= "2020-02-28" & datum <= last(datum)-2) %>%
mutate(value = round(rollmean(entries, 7, fill = 0, align = "right"),0)) %>%
select("datum", "value") %>%
rename(date = datum)
roll_ch_bag_death_hosp_dash <- bag_deaths_dash %>%
full_join(bag_hosps_dash, by = c("geoRegion", "datum")) %>%
filter(datum >= "2020-02-28" & datum <=  last(datum)-5, geoRegion == 'CHFL')  %>%
mutate(hosp_roll = rollmean(entries.y,7,fill = 0, align = "right"),
death_roll = rollmean(entries.x,7,fill = 0, align = "right")) %>%
select("datum", "hosp_roll", "death_roll") %>%
rename(Hospitalierungen = hosp_roll, Todesfälle = death_roll)
roll_ch_bag_hosp <- roll_ch_bag_death_hosp_dash %>%
select(datum, Hospitalierungen) %>%
filter(datum >= '2020-10-01') %>%
rename(date = datum, value = Hospitalierungen)
roll_ch_bag_death <- roll_ch_bag_death_hosp_dash %>%
select(datum, `Todesfälle`) %>%
filter(datum >= '2020-10-01') %>%
rename(date = datum, value = `Todesfälle`)
roll_ch_bag_cases_trend <- bag_cases_ravg %>%
mutate(pct_of_max = (value*100)/max(value, na.rm = T)) %>%
mutate(diff_pct_max = pct_of_max - lag(pct_of_max, 7, default = 0)) %>%
mutate(trend = case_when(diff_pct_max > 3 ~ 'steigend',
diff_pct_max < -3 ~ 'fallend',
TRUE ~ 'gleichbleibend',))
roll_ch_bag_hosp_trend <- roll_ch_bag_hosp %>%
mutate(pct_of_max = (value*100)/max(value, na.rm = T)) %>%
mutate(diff_pct_max = pct_of_max - lag(pct_of_max, 7, default = 0)) %>%
mutate(trend = case_when(diff_pct_max > 3 ~ 'steigend',
diff_pct_max < -3 ~ 'fallend',
TRUE ~ 'gleichbleibend',))
roll_ch_bag_death_trend <- roll_ch_bag_death %>%
mutate(pct_of_max = (value*100)/max(value, na.rm = T)) %>%
mutate(diff_pct_max = pct_of_max - lag(pct_of_max, 7, default = 0)) %>%
mutate(trend = case_when(diff_pct_max > 3 ~ 'steigend',
diff_pct_max < -3 ~ 'fallend',
TRUE ~ 'gleichbleibend',))
forJson_1 <- data.frame(indicatorTitle = "Neue Spitaleintritte",
date = Sys.Date(),
indicatorSubtitle = "7-Tage-Schnitt",
value = tmp_hosp$entries_diff_last,
color = "#24b39c",
trend = last(roll_ch_bag_hosp_trend$trend),
chartType = "area")
forJson_1$chartData <- list(roll_ch_bag_hosp)
forJson_2 <- data.frame(indicatorTitle = "Neuinfektionen",
date = Sys.Date(),
value = tmp_cases$entries_diff_last,
color = "#e66e4a",
trend = last(roll_ch_bag_cases_trend$trend),
chartType = "area")
forJson_2$chartData <- list(bag_cases_ravg %>% filter(date >= '2020-10-01'))
forJson_3 <- data.frame(indicatorTitle = "Neue Todesfälle",
date = Sys.Date(),
value = tmp_death$entries_diff_last,
color = "#05032d",
trend = last(roll_ch_bag_death_trend$trend),
chartType = "area")
forJson_3$chartData <- list(roll_ch_bag_death)
tmp_cases <- read_csv(bag_data$sources$individual$csv$daily$cases) %>%
filter(datum == max(datum), geoRegion == 'CHFL')
new_infections <- paste0("+ ", tmp_cases$entries_diff_last)
tmp_hosp <- read_csv(bag_data$sources$individual$csv$daily$hosp) %>%
filter(datum == max(datum), geoRegion == 'CHFL')
new_hosp <- paste0('+ ', tmp_hosp$entries_diff_last)
tmp_death <- read_csv(bag_data$sources$individual$csv$daily$death) %>%
filter(datum == max(datum), geoRegion == 'CHFL')
new_death <- paste0('+ ', tmp_death$entries_diff_last)
forJson_1 <- data.frame(indicatorTitle = "Neue Spitaleintritte",
date = Sys.Date(),
indicatorSubtitle = "7-Tage-Schnitt",
value = tmp_hosp$entries_diff_last,
color = "#24b39c",
trend = last(roll_ch_bag_hosp_trend$trend),
chartType = "area")
forJson_1$chartData <- list(roll_ch_bag_hosp)
forJson_2 <- data.frame(indicatorTitle = "Neuinfektionen",
date = Sys.Date(),
value = tmp_cases$entries_diff_last,
color = "#e66e4a",
trend = last(roll_ch_bag_cases_trend$trend),
chartType = "area")
forJson_2$chartData <- list(bag_cases_ravg %>% filter(date >= '2020-10-01'))
forJson_3 <- data.frame(indicatorTitle = "Neue Todesfälle",
date = Sys.Date(),
value = tmp_death$entries_diff_last,
color = "#05032d",
trend = last(roll_ch_bag_death_trend$trend),
chartType = "area")
forJson_3$chartData <- list(roll_ch_bag_death)
if (!(file.exists("./data/"))){
print("Create Folder ./data")
dir.create("./data/")
}
z <- toJSON(rbind_pages(list(forJson_1, forJson_2, forJson_3)), pretty = T)
getwd()
z
rm(list=ls(all=TRUE)) # Alles bisherige im Arbeitssprecher loeschen
options(scipen=999)
library(tidyverse)
library(jsonlite)
library(zoo)
library(rvest)
library(renv)
rm(list=ls(all=TRUE))
options(scipen=999)
library(tidyverse)
library(zoo)
library(countrycode)
library(car)
# import helper functions
source("./helpers.R")
# get data from JHU
cases <- read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
dead <- read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")
cured <- read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv")
un <- read_csv("./corona-auto-int/un_pop.csv")
un <- read_csv("/Users/florianseliger/Documents/GitHub/st-methods/bots/corona-charts/corona-auto-int/un_pop.csv")
vaccination <- read_csv("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/vaccinations.csv",
col_types = cols(
total_boosters = col_double(),
total_boosters_per_hundred = col_double()
)) %>%
rename(Land = location,
Iso = iso_code,
Datum = date,
Impfdosen_total = total_vaccinations,
Personen_total = people_vaccinated,
Personen_komplett = people_fully_vaccinated,
Booster = total_boosters,
Impfdosen_daily_raw = daily_vaccinations_raw,
Impfdosen_daily = daily_vaccinations,
Impfdosen_total_100 = total_vaccinations_per_hundred,
"Mind. eine Impfdose, in % der Bev." = people_vaccinated_per_hundred,
"Doppelt geimpft, in % der Bev." = people_fully_vaccinated_per_hundred,
"Booster-Impfungen, in % der Bev." = total_boosters_per_hundred,
"Täglich verabreichte Impfdosen, pro 1000 Einw." = daily_vaccinations_per_million
)
world <- vaccination %>%
filter(Land == "World") %>%
select(Datum, Impfdosen_total)
title_world <- paste0("Weltweit wurden über ", str_sub(last(world$Impfdosen_total)/1000000000,1,2), " Milliarden Impfdosen verabreicht")
update_chart(id = "83dcb25c0e922ac143111ad204e65d15", data = world, title = title_world)
vaccination$Land <- countrycode(vaccination$Land, 'country.name', 'cldr.short.de_ch')
vaccination <- merge(vaccination, un, by = "Land", all.x = TRUE) %>%
filter(Iso != "OWID_CYN")
vaccination$Land <- recode(vaccination$Land, '"Vereinigte Arabische Emirate"="VAE"')
vaccination$Land <- recode(vaccination$Land, '"Saudi-Arabien"="Saudiarabien"')
vaccination$Land <- recode(vaccination$Land, '"Bosnien und Herzegowina" = "Bosnien-Herz."')
vaccination$Land <- recode(vaccination$Land, '"Nordmazedonien" = "Nordmazed."')
vaccination$Land <- recode(vaccination$Land, '"Republik Moldau" = "Moldau"')
vaccination$Land <- recode(vaccination$Land, '"Trinidad und Tobago" = "Trinidad u. T."')
vaccination$Land <- recode(vaccination$Land, '"Dominikanische Republik" = "Dominikan. Rep."')
vaccination$Land <- recode(vaccination$Land, '"Bangladesch" = "Bangladesh"')
vaccination$Land <- recode(vaccination$Land, '"Zimbabwe" = "Simbabwe"')
vaccination$Land <- recode(vaccination$Land, '"Kirgisistan" = "Kirgistan"')
manufacturer <- read_csv("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/vaccinations-by-manufacturer.csv")
colnames(manufacturer) <- c("Land", "Datum", "Hersteller", "Anzahl_Impfdosen")
# filter out 'European Union'
manufacturer <- manufacturer %>%
filter(Land != 'European Union')
manufacturer$Land <- countrycode(manufacturer$Land, 'country.name', 'country.name.de')
manufacturer$Land <- recode(manufacturer$Land, '"Vereinigte Staaten"="USA"')
manufacturer$Land <- recode(manufacturer$Land, '"Tschechische Republik"="Tschechien"')
manufacturer <- merge(manufacturer, un, by = "Land", all.x = TRUE)
manufacturer$Land <- recode(manufacturer$Land, '"Vereinigte Arabische Emirate"="VAE"')
manufacturer$Land <- recode(manufacturer$Land, '"Saudi-Arabien"="Saudiarabien"')
manufacturer$Land <- recode(manufacturer$Land, '"Bosnien und Herzegowina" = "Bosnien-Herz."')
manufacturer$Land <- recode(manufacturer$Land, '"Nordmazedonien" = "Nordmazed."')
manufacturer$Land <- recode(manufacturer$Land, '"Republik Moldau" = "Moldau"')
manufacturer$Land <- recode(manufacturer$Land, '"Trinidad und Tobago" = "Trinidad u. T."')
manufacturer$Land <- recode(manufacturer$Land, '"Dominikanische Republik" = "Dominikan. Rep."')
manufacturer$Land <- recode(manufacturer$Land, '"Bangladesch" = "Bangladesh"')
manufacturer$Land <- recode(manufacturer$Land, '"Zimbabwe" = "Simbabwe"')
manufacturer$Land <- recode(manufacturer$Land, '"Kirgisistan" = "Kirgistan"')
hersteller <- manufacturer %>%
filter(pop > 1000000) %>%
group_by(Land, Hersteller) %>%
summarize(Anzahl_Impfdosen = sum(Anzahl_Impfdosen)) %>%
ungroup() %>%
spread(Hersteller, Anzahl_Impfdosen) %>%
mutate_all(~replace(., is.na(.), 0)) %>%
mutate(Summe = Moderna + `Oxford/AstraZeneca` + `Pfizer/BioNTech` + `Johnson&Johnson` + Sinovac + `Sinopharm/Beijing` + `CanSino` + `Sputnik V` + `Novavax`) %>%
mutate(Moderna = Moderna/Summe*100,
`Oxford/AstraZeneca` = `Oxford/AstraZeneca`/Summe*100,
`Pfizer/BioNTech` = `Pfizer/BioNTech`/Summe*100,
Sinovac = Sinovac/Summe*100,
`Sinopharm/Beijing` = `Sinopharm/Beijing`/Summe*100,
`Johnson&Johnson` = `Johnson&Johnson`/Summe*100,
`CanSino` = `CanSino`/Summe*100,
`Sputnik V` = `Sputnik V`/Summe*100,
`Novavax` = `Novavax`/Summe*100) %>%
dplyr::rename(
"AstraZeneca" = "Oxford/AstraZeneca",
"Biontech/Pfizer" = "Pfizer/BioNTech",
"Johnson & Johnson" = "Johnson&Johnson"
)
hersteller <- hersteller %>%
select(-Summe)  %>%
relocate(Land, `Biontech/Pfizer`, AstraZeneca, Moderna, `Johnson & Johnson`, CanSino, `Sinopharm/Beijing`, Sinovac)
manufacturer <- read_csv("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/vaccinations-by-manufacturer.csv")
colnames(manufacturer) <- c("Land", "Datum", "Hersteller", "Anzahl_Impfdosen")
# filter out 'European Union'
manufacturer <- manufacturer %>%
filter(Land != 'European Union')
manufacturer$Land <- countrycode(manufacturer$Land, 'country.name', 'country.name.de')
manufacturer$Land <- recode(manufacturer$Land, '"Vereinigte Staaten"="USA"')
manufacturer$Land <- recode(manufacturer$Land, '"Tschechische Republik"="Tschechien"')
manufacturer <- merge(manufacturer, un, by = "Land", all.x = TRUE)
manufacturer$Land <- recode(manufacturer$Land, '"Vereinigte Arabische Emirate"="VAE"')
manufacturer$Land <- recode(manufacturer$Land, '"Saudi-Arabien"="Saudiarabien"')
manufacturer$Land <- recode(manufacturer$Land, '"Bosnien und Herzegowina" = "Bosnien-Herz."')
manufacturer$Land <- recode(manufacturer$Land, '"Nordmazedonien" = "Nordmazed."')
manufacturer$Land <- recode(manufacturer$Land, '"Republik Moldau" = "Moldau"')
manufacturer$Land <- recode(manufacturer$Land, '"Trinidad und Tobago" = "Trinidad u. T."')
manufacturer$Land <- recode(manufacturer$Land, '"Dominikanische Republik" = "Dominikan. Rep."')
manufacturer$Land <- recode(manufacturer$Land, '"Bangladesch" = "Bangladesh"')
manufacturer$Land <- recode(manufacturer$Land, '"Zimbabwe" = "Simbabwe"')
manufacturer$Land <- recode(manufacturer$Land, '"Kirgisistan" = "Kirgistan"')
View(manufacturer)
hersteller <- manufacturer %>%
filter(pop > 1000000) %>%
group_by(Land, Hersteller) %>%
summarize(Anzahl_Impfdosen = sum(Anzahl_Impfdosen)) %>%
ungroup() %>%
spread(Hersteller, Anzahl_Impfdosen) %>%
mutate_all(~replace(., is.na(.), 0))
View(hersteller)
hersteller <- manufacturer %>%
filter(pop > 1000000) %>%
group_by(Land, Hersteller) %>%
summarize(Anzahl_Impfdosen = sum(Anzahl_Impfdosen)) %>%
ungroup() %>%
spread(Hersteller, Anzahl_Impfdosen) %>%
mutate_all(~replace(., is.na(.), 0)) %>%
mutate(Summe = Moderna + `Oxford/AstraZeneca` + `Pfizer/BioNTech` + `Johnson&Johnson` + Sinovac + `Sinopharm/Beijing` + `CanSino` + `Sputnik V` + `Novavax` + `Covaxin`) %>%
mutate(Moderna = Moderna/Summe*100,
`Oxford/AstraZeneca` = `Oxford/AstraZeneca`/Summe*100,
`Pfizer/BioNTech` = `Pfizer/BioNTech`/Summe*100,
Sinovac = Sinovac/Summe*100,
`Sinopharm/Beijing` = `Sinopharm/Beijing`/Summe*100,
`Johnson&Johnson` = `Johnson&Johnson`/Summe*100,
`CanSino` = `CanSino`/Summe*100,
`Sputnik V` = `Sputnik V`/Summe*100,
`Novavax` = `Novavax`/Summe*100,
`Covaxin` = `Covaxin`/Summe*100) %>%
dplyr::rename(
"AstraZeneca" = "Oxford/AstraZeneca",
"Biontech/Pfizer" = "Pfizer/BioNTech",
"Johnson & Johnson" = "Johnson&Johnson"
)
hersteller <- hersteller %>%
select(-Summe)  %>%
relocate(Land, `Biontech/Pfizer`, AstraZeneca, Moderna, `Johnson & Johnson`, CanSino, `Sinopharm/Beijing`, Sinovac)
write_clip(hersteller)
library(clipr)
write_clip(hersteller)
write_clip(hersteller)
#prep
rm(list=ls(all=TRUE)) # Alles bisherige im Arbeitssprecher loeschen
options(scipen=999)
library(tidyverse)
library(jsonlite)
library(zoo)
library(rvest)
library(renv)
bag_data <- fromJSON('https://www.covid19.admin.ch/api/data/context')
bag_cases <- read_csv(bag_data$sources$individual$csv$daily$cases)%>%
select("geoRegion", "datum", "entries", "sumTotal", "pop") %>%
filter(datum != max(datum)) #exclude today, because new cases will not be there
bag_cases_age <- read_csv(bag_data$sources$individual$csv$weekly$byAge$cases) %>%
select("altersklasse_covid19", "geoRegion", "datum", "entries", "sumTotal")
tmp_cases <- read_csv(bag_data$sources$individual$csv$daily$cases) %>%
filter(datum == max(datum), geoRegion == 'CHFL')
new_infections <- paste0("+ ", tmp_cases$entries_diff_last)
tmp_hosp <- read_csv(bag_data$sources$individual$csv$daily$hosp) %>%
filter(datum == max(datum), geoRegion == 'CHFL')
new_hosp <- paste0('+ ', tmp_hosp$entries_diff_last)
tmp_death <- read_csv(bag_data$sources$individual$csv$daily$death) %>%
filter(datum == max(datum), geoRegion == 'CHFL')
new_death <- paste0('+ ', tmp_death$entries_diff_last)
df_overview <- data.frame(
Indikator = c("Neuinfektionen", "Hospitalisierungen", "Todesfälle"),
Wert = c(new_infections, new_hosp, new_death)
)
subtitle <- paste0("Neue Meldungen des Bundesamtes für Gesundheit vom ",
gsub("\\b0(\\d)\\b", "\\1", format(max(tmp_death$datum), format = "%d. %m. %Y")),
" für die Schweiz und Liechtenstein")
bag_cases_dash <- read_csv(bag_data$sources$individual$csv$daily$cases)%>%
select("geoRegion", "datum", "entries", "sumTotal", "pop") %>%
filter(datum != max(datum)) #exclude today, because new cases will not be there
bag_deaths_dash <- read_csv(bag_data$sources$individual$csv$daily$death) %>%
select("geoRegion", "datum", "entries", "sumTotal") %>%
filter(datum != max(datum)) #exclude today
bag_hosps_dash <- read_csv(bag_data$sources$individual$csv$daily$hosp) %>%
select("geoRegion", "datum", "entries", "sumTotal") %>%
filter(datum != max(datum)) #exclude today
bag_cases_ravg <- bag_cases_dash %>%
filter(geoRegion == 'CHFL', datum >= "2020-02-28" & datum <= last(datum)-2) %>%
mutate(value = round(rollmean(entries, 7, fill = 0, align = "right"),0)) %>%
select("datum", "value") %>%
rename(date = datum)
roll_ch_bag_death_hosp_dash <- bag_deaths_dash %>%
full_join(bag_hosps_dash, by = c("geoRegion", "datum")) %>%
filter(datum >= "2020-02-28" & datum <=  last(datum)-5, geoRegion == 'CHFL')  %>%
mutate(hosp_roll = rollmean(entries.y,7,fill = 0, align = "right"),
death_roll = rollmean(entries.x,7,fill = 0, align = "right")) %>%
select("datum", "hosp_roll", "death_roll") %>%
rename(Hospitalierungen = hosp_roll, Todesfälle = death_roll)
roll_ch_bag_hosp <- roll_ch_bag_death_hosp_dash %>%
select(datum, Hospitalierungen) %>%
filter(datum >= '2020-10-01') %>%
rename(date = datum, value = Hospitalierungen)
roll_ch_bag_death <- roll_ch_bag_death_hosp_dash %>%
select(datum, `Todesfälle`) %>%
filter(datum >= '2020-10-01') %>%
rename(date = datum, value = `Todesfälle`)
roll_ch_bag_cases_trend <- bag_cases_ravg %>%
mutate(pct_of_max = (value*100)/max(value, na.rm = T)) %>%
mutate(diff_pct_max = pct_of_max - lag(pct_of_max, 7, default = 0)) %>%
mutate(trend = case_when(diff_pct_max > 3 ~ 'steigend',
diff_pct_max < -3 ~ 'fallend',
TRUE ~ 'gleichbleibend',))
roll_ch_bag_hosp_trend <- roll_ch_bag_hosp %>%
mutate(pct_of_max = (value*100)/max(value, na.rm = T)) %>%
mutate(diff_pct_max = pct_of_max - lag(pct_of_max, 7, default = 0)) %>%
mutate(trend = case_when(diff_pct_max > 3 ~ 'steigend',
diff_pct_max < -3 ~ 'fallend',
TRUE ~ 'gleichbleibend',))
roll_ch_bag_death_trend <- roll_ch_bag_death %>%
mutate(pct_of_max = (value*100)/max(value, na.rm = T)) %>%
mutate(diff_pct_max = pct_of_max - lag(pct_of_max, 7, default = 0)) %>%
mutate(trend = case_when(diff_pct_max > 3 ~ 'steigend',
diff_pct_max < -3 ~ 'fallend',
TRUE ~ 'gleichbleibend',))
forJson_1 <- data.frame(indicatorTitle = "Neue Spitaleintritte",
date = Sys.Date(),
indicatorSubtitle = "7-Tage-Schnitt",
value = tmp_hosp$entries_diff_last,
color = "#24b39c",
trend = last(roll_ch_bag_hosp_trend$trend),
chartType = "area")
forJson_1$chartData <- list(roll_ch_bag_hosp)
forJson_2 <- data.frame(indicatorTitle = "Neuinfektionen",
date = Sys.Date(),
value = tmp_cases$entries_diff_last,
color = "#e66e4a",
trend = last(roll_ch_bag_cases_trend$trend),
chartType = "area")
forJson_2$chartData <- list(bag_cases_ravg %>% filter(date >= '2020-10-01'))
forJson_3 <- data.frame(indicatorTitle = "Neue Todesfälle",
date = Sys.Date(),
value = tmp_death$entries_diff_last,
color = "#05032d",
trend = last(roll_ch_bag_death_trend$trend),
chartType = "area")
forJson_3$chartData <- list(roll_ch_bag_death)
View(forJson_3)
z <- toJSON(rbind_pages(list(forJson_1, forJson_2, forJson_3)), pretty = T)
z
last(roll_ch_bag_cases_trend$trend)
last(bag_data$datum)
tmp_cases
tmp_cases$datum
forJson_1 <- data.frame(indicatorTitle = "Neue Spitaleintritte",
date = tmp_cases$datum,
indicatorSubtitle = "7-Tage-Schnitt",
value = tmp_hosp$entries_diff_last,
color = "#24b39c",
trend = last(roll_ch_bag_hosp_trend$trend),
chartType = "area")
forJson_1$chartData <- list(roll_ch_bag_hosp)
forJson_3 <- data.frame(indicatorTitle = "Neue Todesfälle",
date = tmp_cases$datum,
value = tmp_death$entries_diff_last,
color = "#05032d",
trend = last(roll_ch_bag_death_trend$trend),
chartType = "area")
#prep
rm(list=ls(all=TRUE)) # Alles bisherige im Arbeitssprecher loeschen
options(scipen=999)
library(tidyverse)
library(jsonlite)
library(zoo)
library(rvest)
library(renv)
setwd("~/Documents/GitHub/st-methods/bots/corona-charts")
pop <- read_csv("./corona-auto-ch/pop_kant.csv")
bag_data <- fromJSON('https://www.covid19.admin.ch/api/data/context')
ch_vacc_delrec <- read_csv(bag_data$sources$individual$csv$vaccDosesDelivered) %>%
select(date,geoRegion, pop, type, sumTotal)
ch_vacc_adm <- read_csv(bag_data$sources$individual$csv$vaccDosesAdministered) %>%
select(date,geoRegion, pop, type, sumTotal)
ch_vacc_doses <- rbind(ch_vacc_delrec, ch_vacc_adm)
ch_vacc_persons <- read_csv(bag_data$sources$individual$csv$vaccPersonsV2) %>%
filter(age_group == "total_population") %>%
select(geoRegion, pop, date, type, sumTotal) %>%
drop_na()
ch_vacc_manuf <- read_csv(bag_data$sources$individual$csv$weeklyVacc$byVaccine$vaccDosesAdministered) %>%
filter(geoRegion == "CHFL") %>%
select(date, vaccine, sumTotal) %>%
spread(vaccine, sumTotal) %>%
rename('COVID-19 Vaccine Moderna® (Moderna)' = 'moderna', 'Comirnaty® (Pfizer / BioNTech)' = 'pfizer_biontech')
ch_inf_vacc <- read_csv(bag_data$sources$individual$csv$daily$casesVaccPersons) %>%
#  filter(vaccine == "all") %>%
mutate(type = "Infektionen")
ch_hosp_vacc <- read_csv(bag_data$sources$individual$csv$daily$hospVaccPersons) %>%
#  filter(vaccine == "all") %>%
mutate(type = "Spitaleintritte")
ch_death_vacc <- read_csv(bag_data$sources$individual$csv$daily$deathVaccPersons) %>%
#  filter(vaccine == "all") %>%
mutate(type = "Todesfälle")
ch_hosp_vacc_age <- read_csv(bag_data$sources$individual$csv$weekly$byAge$hospVaccPersons) %>%
filter(vaccine == "all")
vacc_ch_persons_kant <- ch_vacc_persons %>%
filter(geoRegion != "FL" & geoRegion != "CHFL"  & geoRegion != "CH") %>%
filter(date == max(date)) %>%
mutate(per100 =round(100*sumTotal/pop,1)) %>%
left_join(pop[,c(1:2)], by = c("geoRegion" = "ktabk")) %>%
select(-pop, -sumTotal, -geoRegion, -date) %>%
spread(type, per100) %>%
select(-COVID19AtLeastOneDosePersons) %>%
mutate(COVID19FullyVaccPersons = COVID19FullyVaccPersons-COVID19FirstBoosterPersons) %>%
rename("Doppelt geimpft*" = COVID19FullyVaccPersons,
"Einmal geimpft" = COVID19PartiallyVaccPersons,
"Booster erhalten" = COVID19FirstBoosterPersons) %>%
arrange(desc(`Doppelt geimpft*`+`Einmal geimpft`+`Booster erhalten`))
View(vacc_ch_persons_kant)
View(ch_vacc_persons)
View(ch_vacc_persons)
View(vacc_ch_persons_kant)
